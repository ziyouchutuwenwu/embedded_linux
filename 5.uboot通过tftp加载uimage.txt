修改uboot代码并编译
include/configs/vexpress_common.h

注意：
我机器有docker，而且所有的容器使用的是自建的bridge，所以，这里的ip需要注意，都是容器在这个bridge下的ip

加入相应的宏定义
#define CONFIG_IPADDR   172.18.0.111
#define CONFIG_NETMASK  255.255.0.0
#define CONFIG_SERVERIP 172.18.0.8
修改启动文件为uImage
#define CONFIG_BOOTFILE "uImage"
修改启动命令为
#define CONFIG_BOOTCOMMAND  "tftp 0x60003000 uImage; setenv bootargs'root=/dev/mmcblk0 console=ttyAMA0'; bootm 0x60003000"

编译
make ARCH=arm CROSS_COMPILE=arm-linux-gnueabi- -j8

内核编译（加载地址需要和uboot的启动加载位置一致）
需要先安装
sudo apt install u-boot-tools

make ARCH=arm CROSS_COMPILE=arm-linux-gnueabi- O=./out_vexpress_4_19 clean
make ARCH=arm CROSS_COMPILE=arm-linux-gnueabi- O=./out_vexpress_4_19 vexpress_defconfig
make ARCH=arm CROSS_COMPILE=arm-linux-gnueabi- O=./out_vexpress_4_19 uImage LOADADDR=0x60003000 -j8


仿真测试（把uImage放到tftp目录下）
sudo qemu-system-arm -M vexpress-a9 \
     -kernel /home/mmc/downloads/u-boot-2019.07/u-boot \
     -nographic \
     -m 512M \
     -net nic,\
     -net tap,ifname=vnet0,script=no,downscript=no \
     -sd /home/mmc/downloads/a9rootfs.ext3

在uboot界面按任意键中断：
tftp 0x60003000 uImage
tftp 0x60500000 vexpress-v2p-ca9.dtb
bootm 0x60003000 - 0x60500000
成功启动linux内核，提示没有文件系统

再次启动，uboot内输入
setenv bootargs 'root=/dev/mmcblk0 console=ttyAMA0'
tftp 0x60003000 uImage
tftp 0x60500000 vexpress-v2p-ca9.dtb
bootm 0x60003000 - 0x60500000
发现没有ip

修改uboot参数，重新编译
#define CONFIG_BOOTCOMMAND "tftp 0x60003000 uImage; tftp 0x60500000 vexpress-v2p-ca9.dtb; setenv bootargs \"root=/dev/mmcblk0 console=ttyAMA0\"; bootm 0x60003000 - 0x60500000"

仿真测试（把uImage放到tftp目录下）
sudo qemu-system-arm -M vexpress-a9 \
     -kernel /home/mmc/downloads/u-boot-2019.07/u-boot \
     -nographic \
     -m 512M \
     -net nic,\
     -net tap,ifname=vnet0,script=no,downscript=no \
     -sd /home/mmc/downloads/a9rootfs.ext3
直接起来了